// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce64e16b-45bf-46a9-a537-5f6bb48f0146"),
                            City = "Vilnius",
                            Country = "Lithuania",
                            PersonId = new Guid("e08af54c-c88f-4943-a106-bae2071a60be"),
                            StreetAddress = "Gabijos",
                            ZipCode = "LT-00000"
                        },
                        new
                        {
                            Id = new Guid("2a60f9c5-3d87-4cfe-a713-019de1fdc9cf"),
                            City = "Vilnius",
                            Country = "Lithuania",
                            PersonId = new Guid("3343c381-65ea-4392-a2ac-5eaef92d99e9"),
                            StreetAddress = "Vilniaus",
                            ZipCode = "LT-00000"
                        },
                        new
                        {
                            Id = new Guid("798bf79c-0d1d-4334-a64c-3222966601e9"),
                            City = "Vilnius",
                            Country = "Lithuania",
                            PersonId = new Guid("93ff99ed-d074-4a44-9ee0-fdc9be300cf5"),
                            StreetAddress = "Medeinos",
                            ZipCode = "LT-00000"
                        });
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d27a2d1a-ed26-48e5-9d8d-9be9067b310a"),
                            Name = "Harari, Yuval Noah"
                        },
                        new
                        {
                            Id = new Guid("23933d81-8a3a-4fc6-a121-4a078ba86bfa"),
                            Name = "King, Stephen"
                        },
                        new
                        {
                            Id = new Guid("33a9812c-c9b2-44c2-9443-f07e20b74d80"),
                            Name = "Straub, Peter"
                        });
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da919b37-703d-47d8-b65d-368d9fa1429d"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 638, DateTimeKind.Local).AddTicks(8772),
                            ISBN = "0062316095",
                            Language = "English",
                            NumberOfPages = 464,
                            Publisher = "Harper",
                            Subject = "History",
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            Id = new Guid("68ffc480-4606-4607-8b46-8366229a8789"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 638, DateTimeKind.Local).AddTicks(9918),
                            ISBN = "9781451697216",
                            Language = "English",
                            NumberOfPages = 921,
                            Publisher = "Pocket Books",
                            Subject = "Dark Fantasy",
                            Title = "The Talisman: A Novel"
                        });
                });

            modelBuilder.Entity("Domain.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("d27a2d1a-ed26-48e5-9d8d-9be9067b310a"),
                            BookId = new Guid("da919b37-703d-47d8-b65d-368d9fa1429d")
                        },
                        new
                        {
                            AuthorId = new Guid("23933d81-8a3a-4fc6-a121-4a078ba86bfa"),
                            BookId = new Guid("68ffc480-4606-4607-8b46-8366229a8789")
                        },
                        new
                        {
                            AuthorId = new Guid("33a9812c-c9b2-44c2-9443-f07e20b74d80"),
                            BookId = new Guid("68ffc480-4606-4607-8b46-8366229a8789")
                        });
                });

            modelBuilder.Entity("Domain.Models.BookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BorrowedMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BorrowingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Format")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReservedMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowedMemberId");

                    b.HasIndex("RackId");

                    b.HasIndex("ReservedMemberId");

                    b.ToTable("BookItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4a7cb00-1fb6-4f46-9546-f69a5f45b824"),
                            Barcode = "001",
                            BookId = new Guid("da919b37-703d-47d8-b65d-368d9fa1429d"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 639, DateTimeKind.Local).AddTicks(9048),
                            DateOfPurchase = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Format = 0,
                            Price = 25.699999999999999,
                            PublicationDate = new DateTime(2015, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RackId = new Guid("435d6acb-182d-46c6-89df-ff250bdc1d9e"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("53ddda4c-b976-46e8-8b86-902187e741e5"),
                            Barcode = "002",
                            BookId = new Guid("68ffc480-4606-4607-8b46-8366229a8789"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 640, DateTimeKind.Local).AddTicks(3505),
                            DateOfPurchase = new DateTime(2021, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Format = 1,
                            Price = 44.869999999999997,
                            PublicationDate = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RackId = new Guid("435d6acb-182d-46c6-89df-ff250bdc1d9e"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9d96da3-816a-45cf-bb76-c6cca1b484a2"),
                            Barcode = "123456",
                            IsActive = true,
                            IssuedAt = new DateTime(2021, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            MemberId = new Guid("3c9ca831-0634-424a-8ad6-81c2b991903c"),
                            Number = "12345"
                        });
                });

            modelBuilder.Entity("Domain.Models.Librarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Librarians");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f95fdfd-2529-4e3e-8a9d-d6aec39ae109"),
                            Code = "L210000",
                            PersonId = new Guid("e08af54c-c88f-4943-a106-bae2071a60be"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("DateOfMembership")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c9ca831-0634-424a-8ad6-81c2b991903c"),
                            Code = "M210000",
                            DateOfMembership = new DateTime(2021, 6, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            PersonId = new Guid("3343c381-65ea-4392-a2ac-5eaef92d99e9"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonalCode")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e08af54c-c88f-4943-a106-bae2071a60be"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 632, DateTimeKind.Local).AddTicks(8999),
                            Email = "librarian@lms.com",
                            Name = "Sarah Smith",
                            PersonalCode = "41234567890",
                            Phone = "860000000"
                        },
                        new
                        {
                            Id = new Guid("3343c381-65ea-4392-a2ac-5eaef92d99e9"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 635, DateTimeKind.Local).AddTicks(7093),
                            Email = "member@lms.com",
                            Name = "John Adams",
                            PersonalCode = "31234567890",
                            Phone = "861111111"
                        },
                        new
                        {
                            Id = new Guid("93ff99ed-d074-4a44-9ee0-fdc9be300cf5"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 635, DateTimeKind.Local).AddTicks(7123),
                            Email = "admin@lms.com",
                            Name = "Admin",
                            PersonalCode = "00000000000",
                            Phone = "000000000"
                        });
                });

            modelBuilder.Entity("Domain.Models.Rack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationIdentifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RackNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RackNumber", "LocationIdentifier")
                        .IsUnique();

                    b.ToTable("Racks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("435d6acb-182d-46c6-89df-ff250bdc1d9e"),
                            CreatedAt = new DateTime(2021, 6, 5, 17, 51, 28, 638, DateTimeKind.Local).AddTicks(2976),
                            LocationIdentifier = "A",
                            RackNumber = 0
                        });
                });

            modelBuilder.Entity("Domain.Models.Address", b =>
                {
                    b.HasOne("Domain.Models.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Models.Address", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Models.BookAuthor", b =>
                {
                    b.HasOne("Domain.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Domain.Models.BookItem", b =>
                {
                    b.HasOne("Domain.Models.Book", "Book")
                        .WithMany("BookItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Member", "BorrowedMember")
                        .WithMany("BorrowedBookItems")
                        .HasForeignKey("BorrowedMemberId");

                    b.HasOne("Domain.Models.Rack", "Rack")
                        .WithMany("BookItems")
                        .HasForeignKey("RackId");

                    b.HasOne("Domain.Models.Member", "ReservedMember")
                        .WithMany("ReservedBookItems")
                        .HasForeignKey("ReservedMemberId");

                    b.Navigation("Book");

                    b.Navigation("BorrowedMember");

                    b.Navigation("Rack");

                    b.Navigation("ReservedMember");
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.HasOne("Domain.Models.Member", "Member")
                        .WithMany("Cards")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Models.Librarian", b =>
                {
                    b.HasOne("Domain.Models.Person", "Person")
                        .WithOne("Librarian")
                        .HasForeignKey("Domain.Models.Librarian", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Models.Member", b =>
                {
                    b.HasOne("Domain.Models.Person", "Person")
                        .WithOne("Member")
                        .HasForeignKey("Domain.Models.Member", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookItems");
                });

            modelBuilder.Entity("Domain.Models.Member", b =>
                {
                    b.Navigation("BorrowedBookItems");

                    b.Navigation("Cards");

                    b.Navigation("ReservedBookItems");
                });

            modelBuilder.Entity("Domain.Models.Person", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Librarian");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Models.Rack", b =>
                {
                    b.Navigation("BookItems");
                });
#pragma warning restore 612, 618
        }
    }
}
